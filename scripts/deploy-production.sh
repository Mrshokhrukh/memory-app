#!/bin/bash

# Memoryscape Production Deployment Script
# This script helps deploy and verify the production environment

set -e

echo "🚀 Memoryscape Production Deployment Script"
echo "=========================================="

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
NC='\033[0m' # No Color

# Function to print colored output
print_status() {
    echo -e "${GREEN}✅ $1${NC}"
}

print_warning() {
    echo -e "${YELLOW}⚠️  $1${NC}"
}

print_error() {
    echo -e "${RED}❌ $1${NC}"
}

# Check if required tools are installed
check_dependencies() {
    print_status "Checking dependencies..."
    
    if ! command -v curl &> /dev/null; then
        print_error "curl is required but not installed"
        exit 1
    fi
    
    if ! command -v node &> /dev/null; then
        print_error "Node.js is required but not installed"
        exit 1
    fi
    
    print_status "All dependencies are installed"
}

# Test local server
test_local_server() {
    print_status "Testing local server..."
    
    # Check if server is running
    if curl -s http://localhost:8800/ > /dev/null 2>&1; then
        print_status "Local server is running"
    else
        print_warning "Local server is not running. Starting it..."
        cd server
        MONGODB_URI=mongodb://localhost:27017/memoryscape \
        JWT_SECRET=your-super-secret-jwt-key-change-this-in-production \
        NODE_ENV=development \
        PORT=8800 \
        npm start &
        sleep 5
        cd ..
    fi
    
    # Test registration
    local_response=$(curl -s -X POST "http://localhost:8800/api/auth/register" \
        -H "Content-Type: application/json" \
        -d '{"name":"Deploy Test","email":"deploy@example.com","password":"Test123"}')
    
    if echo "$local_response" | grep -q "success.*true"; then
        print_status "Local registration test passed"
    else
        print_error "Local registration test failed: $local_response"
        exit 1
    fi
}

# Test production server
test_production_server() {
    print_status "Testing production server..."
    
    # Test health endpoint
    local health_response=$(curl -s https://memory-space-backend.onrender.com/)
    if echo "$health_response" | grep -q "Memoryscape API is running"; then
        print_status "Production server is running"
    else
        print_warning "Production server health check failed: $health_response"
    fi
    
    # Test registration
    local reg_response=$(curl -s -X POST "https://memory-space-backend.onrender.com/api/auth/register" \
        -H "Content-Type: application/json" \
        -d '{"name":"Production Test","email":"prodtest@example.com","password":"Test123"}')
    
    if echo "$reg_response" | grep -q "success.*true"; then
        print_status "Production registration test passed"
    else
        print_warning "Production registration test failed: $reg_response"
    fi
}

# Check environment variables
check_env_vars() {
    print_status "Checking environment variables..."
    
    echo "Required environment variables for production:"
    echo "- NODE_ENV=production"
    echo "- PORT=10000"
    echo "- MONGODB_URI=<your-mongodb-connection-string>"
    echo "- JWT_SECRET=<auto-generated-by-render>"
    echo "- JWT_EXPIRE=7d"
    echo "- CLIENT_URL=https://memory-client-neon.vercel.app"
    
    print_warning "Please ensure these are set in your Render dashboard"
}

# Main execution
main() {
    check_dependencies
    test_local_server
    test_production_server
    check_env_vars
    
    echo ""
    echo "🎉 Deployment verification complete!"
    echo ""
    echo "Next steps:"
    echo "1. Deploy to Render.com using the updated render.yaml"
    echo "2. Set environment variables in Render dashboard"
    echo "3. Test the production endpoints"
    echo "4. Monitor the application logs"
}

# Run main function
main "$@" 